#!/usr/bin/env bash

# Reference: https://github.com/foundry-rs/foundry/blob/master/foundryup/foundryup,
# https://github.com/succinctlabs/sp1/blob/main/sp1up/sp1up

set -eo pipefail

BASE_DIR=${XDG_CONFIG_HOME:-$HOME}
ATHENA_DIR=${ATHENA_DIR:-"$BASE_DIR/.athena"}
ATHENA_BIN_DIR="$ATHENA_DIR/bin"
mkdir -p $ATHENA_BIN_DIR

BINS=(cargo-athena)

export RUSTFLAGS="-C target-cpu=native"

main() {
  need_cmd git
  need_cmd curl

  while [[ -n $1 ]]; do
    case $1 in
      --)               shift; break;;

      -r|--repo)        shift; ATHUP_REPO=$1;;
      -b|--branch)      shift; ATHUP_BRANCH=$1;;
      -v|--version)     shift; ATHUP_VERSION=$1;;
      -p|--path)        shift; ATHUP_LOCAL_REPO=$1;;
      -P|--pr)          shift; ATHUP_PR=$1;;
      -C|--commit)      shift; ATHUP_COMMIT=$1;;
      --arch)           shift; ATHUP_ARCH=$1;;
      --platform)       shift; ATHUP_PLATFORM=$1;;
      -h|--help)
        usage
        exit 0
        ;;
      *)
        warn "unknown option: $1"
        usage
        exit 1
    esac; shift
  done

  # Print the banner after successfully parsing args
  banner

  if [ -n "$ATHUP_PR" ]; then
    if [ -z "$ATHUP_BRANCH" ]; then
      ATHUP_BRANCH="refs/pull/$ATHUP_PR/head"
    else
      err "can't use --pr and --branch at the same time"
    fi
  fi

  # Installs from a local repository if --path parameter is provided
  if [[ -n "$ATHUP_LOCAL_REPO" ]]; then
    need_cmd cargo

    # Ignore branches/versions as we do not want to modify local git state
    if [ -n "$ATHUP_REPO" ] || [ -n "$ATHUP_BRANCH" ] || [ -n "$_VERSION" ]; then
      warn "--branch, --version, and --repo arguments are ignored during local install"
    fi

    # Enter local repo and build
    say "installing from $ATHUP_LOCAL_REPO"
    cd "$ATHUP_LOCAL_REPO"
    ensure cargo build --bins --release # need 4 speed

    for bin in "${BINS[@]}"; do
      # Remove prior installations if they exist
      rm -f "$ATHENA_BIN_DIR/$bin"
      # Symlink from local repo binaries to bin dir
      ensure ln -s "$PWD/target/release/$bin" "$ATHENA_BIN_DIR/$bin"
    done

    say "done"
    exit 0
  fi

  ATHUP_REPO=${ATHUP_REPO:-athenavm/athena}

  # Install by downloading binaries
  if [[ "$ATHUP_REPO" == "athenavm/athena" && -z "$ATHUP_BRANCH" && -z "$ATHUP_COMMIT" ]]; then
    _VERSION=${_VERSION:-latest}
    ATHUP_TAG=$_VERSION

    if [[ "$_VERSION" == [[:digit:]]* ]]; then
      # Add v prefix
      _VERSION="v${_VERSION}"
      ATHUP_TAG="${_VERSION}"
    fi

    say "installing athena (version ${_VERSION}, tag ${ATHUP_TAG})"

    uname_s=$(uname -s)
    PLATFORM=$(tolower "${ATHUP_PLATFORM:-$uname_s}")
    EXT="tar.gz"
    case $PLATFORM in
      linux) ;;
      darwin|mac*)
        PLATFORM="darwin"
        ;;
      mingw*|win*)
        EXT="zip"
        PLATFORM="win32"
        ;;
      *)
        err "unsupported platform: $PLATFORM"
        ;;
    esac

    uname_m=$(uname -m)
    ARCHITECTURE=$(tolower "${ATHUP_ARCH:-$uname_m}")
    if [ "${ARCHITECTURE}" = "x86_64" ]; then
      # Redirect stderr to /dev/null to avoid printing errors if non Rosetta.
      if [ "$(sysctl -n sysctl.proc_translated 2>/dev/null)" = "1" ]; then
        ARCHITECTURE="arm64" # Rosetta.
      else
        ARCHITECTURE="amd64" # Intel.
      fi
    elif [ "${ARCHITECTURE}" = "arm64" ] ||[ "${ARCHITECTURE}" = "aarch64" ] ; then
      ARCHITECTURE="arm64" # Arm.
    else
      ARCHITECTURE="amd64" # Amd.
    fi

    # Compute the URL of the release tarball in the repository.
    RELEASE_URL="https://github.com/${ATHUP_REPO}/releases/download/${ATHUP_TAG}/"
    BIN_ARCHIVE_URL="${RELEASE_URL}cargo_athena_${_VERSION}_${PLATFORM}_${ARCHITECTURE}.$EXT"

    # Download and extract the binaries archive
    say "downloading latest cargo-athena"
    if [ "$PLATFORM" = "win32" ]; then
      tmp="$(mktemp -d 2>/dev/null || echo ".")/cargo-athena.zip"
      ensure download "$BIN_ARCHIVE_URL" "$tmp"
      ensure unzip "$tmp" -d "$ATHENA_BIN_DIR"
      rm -f "$tmp"
    else
      ensure download "$BIN_ARCHIVE_URL" | ensure tar -xzC "$ATHENA_BIN_DIR"
    fi

    for bin in "${BINS[@]}"; do
      bin_path="$ATHENA_BIN_DIR/$bin"

      # Print installed msg
      say "installed - $(ensure "$bin_path" execute --version)"

      # Check if the default path of the binary is not in ATHENA_BIN_DIR
      which_path="$(command -v "$bin" || true)"
      if [ -n "$which_path" ] && [ "$which_path" != "$bin_path" ]; then
        warn ""
        cat 1>&2 <<EOF
There are multiple binaries with the name '$bin' present in your 'PATH'.
This may be the result of installing '$bin' using another method,
like Cargo or other package managers.
You may need to run 'rm $which_path' or move '$ATHENA_BIN_DIR'
in your 'PATH' to allow the newly installed version to take precedence!

EOF
      fi
    done

    say "installing rust toolchain"
    ensure "$bin_path" execute install-toolchain
    say "installed rust toolchain"

    say "done!"

  # Install by cloning the repo with the provided branch/tag
  else
    need_cmd cargo
    ATHUP_BRANCH=${ATHUP_BRANCH:-main}
    REPO_PATH="$ATHENA_DIR/$ATHUP_REPO"

    # If repo path does not exist, grab the author from the repo, make a directory in .foundry, cd to it and clone.
    if [ ! -d "$REPO_PATH" ]; then
      AUTHOR="$(echo "$ATHUP_REPO" | cut -d'/' -f1 -)"
      ensure mkdir -p "$ATHENA_DIR/$AUTHOR"
      cd "$ATHENA_DIR/$AUTHOR"
      ensure git clone "https://github.com/$ATHUP_REPO"
    fi

    # Force checkout, discarding any local changes
    cd "$REPO_PATH"
    ensure git fetch origin "${ATHUP_BRANCH}:remotes/origin/${ATHUP_BRANCH}"
    ensure git checkout "origin/${ATHUP_BRANCH}"

    # If set, checkout specific commit from branch
    if [ -n "$ATHUP_COMMIT" ]; then
      say "installing at commit $ATHUP_COMMIT"
      ensure git checkout "$ATHUP_COMMIT"
    fi

    # Build the repo and install the binaries locally to the bin directory.
    ensure cargo build --bins --release
    for bin in "${BINS[@]}"; do
      for try_path in target/release/$bin target/release/$bin.exe; do
        if [ -f "$try_path" ]; then
          [ -e "$ATHENA_BIN_DIR/$bin" ] && warn "overwriting existing $bin in $ATHENA_BIN_DIR"
          mv -f "$try_path" "$ATHENA_BIN_DIR"
        fi
      done
    done

    say "done"
  fi
}

usage() {
  cat 1>&2 <<EOF
The Athena toolchain installer.

Update or revert to a specific Athena version with ease.

USAGE:
    athup <OPTIONS>

OPTIONS:
    -h, --help      Print help information
    -v, --version   Install a specific version
    -b, --branch    Install a specific branch
    -P, --pr        Install a specific Pull Request
    -C, --commit    Install a specific commit
    -r, --repo      Install from a remote GitHub repo (uses default branch if no other options are set)
    -p, --path      Install a local repository
    --arch          Install a specific architecture (supports amd64 and arm64)
    --platform      Install a specific platform (supports win32, linux, and darwin)
EOF
}

say() {
  printf "athup: %s\n" "$1"
}

warn() {
  say "warning: ${1}" >&2
}

err() {
  say "$1" >&2
  exit 1
}

tolower() {
  echo "$1" | awk '{print tolower($0)}'
}

need_cmd() {
  if ! check_cmd "$1"; then
    err "need '$1' (command not found)"
  fi
}

check_cmd() {
  command -v "$1" &>/dev/null
}

# Run a command that should never fail. If the command fails execution
# will immediately terminate with an error showing the failing command.
ensure() {
  if ! "$@"; then err "command failed: $*"; fi
}

# Downloads $1 into $2 or stdout
download() {
  if [ -n "$2" ]; then
    # output into $2
    if check_cmd curl; then
      curl -#o "$2" -L "$1"
    else
      wget --show-progress -qO "$2" "$1"
    fi
  else
    # output to stdout
    if check_cmd curl; then
      curl -#L "$1"
    else
      wget --show-progress -qO- "$1"
    fi
  fi
}

# Banner Function
banner() {
  printf "
.______  ._______ ._______ ._______ ._______ ._______ ._______ ._______ ._______

    ___   __  __
   /   | / /_/ /_  ___  ____  ____ _
  / /| |/ __/ __ \/ _ \/ __ \/ __ '/      A performant, 100%% open-source,
 / ___ / /_/ / / /  __/ / / / /_/ /      modern blockchain operating system.
/_/  |_\__/_/ /_/\___/_/ /_/\__,_/

._______ ._______ ._______ ._______ ._______ ._______ ._______ ._______ ._______

Repo       : https://github.com/athenavm/athena

._______ ._______ ._______ ._______ ._______ ._______ ._______ ._______ ._______

"
}


main "$@"
