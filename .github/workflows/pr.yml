name: PR

on:
  push:
    branches: [main]
  pull_request:
    branches:
      - "**"
    paths:
      - "cli/**"
      - "core/**"
      - "ffi/**"
      - "sdk/**"
      - "vm/**"
      - "tests/**"
      - "examples/**"
      - "Cargo.toml"
      - ".github/workflows/**"
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test-x86:
    name: Test (x86-64)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup CI
        uses: ./.github/actions/setup

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all-targets --all-features

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release
        env:
          RUSTFLAGS: -Copt-level=3 -Cdebug-assertions -Coverflow-checks=y -Cdebuginfo=0 -C target-cpu=native
          RUST_BACKTRACE: 1

  # test-arm:
  #   name: Test (ARM)
  #   runs-on: runs-on,runner=64cpu-linux-arm64,spot=false
  #   env:
  #     CARGO_NET_GIT_FETCH_WITH_CLI: "true"
  #   steps:
  #     - name: Checkout sources
  #       uses: actions/checkout@v4

  #     - name: Setup CI
  #       uses: ./.github/actions/setup

  #     - name: Run cargo check
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: check
  #         args: --all-targets --all-features

  #     - name: Run cargo test
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: test
  #         args: --release
  #       env:
  #         RUSTFLAGS: -Copt-level=3 -Cdebug-assertions -Coverflow-checks=y -Cdebuginfo=0 -C target-cpu=native
  #         RUST_BACKTRACE: 1

  test-go:
    name: Test (Go)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup CI
        uses: ./.github/actions/setup

      - name: Run go test
        run: |
          cd ffi/athcon/bindings/go
          go generate
          go test -v ./...

  lint:
    name: Formatting & Clippy
    runs-on: ubuntu-latest
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup CI
        uses: ./.github/actions/setup

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
        env:
          CARGO_INCREMENTAL: 1

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-features --all-targets -- -D warnings -A incomplete-features
        env:
          CARGO_INCREMENTAL: 1

  examples:
    name: Examples
    runs-on: ubuntu-latest
    env:
      ATHENA_DIR: "${{ github.workspace }}/.athena"
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup CI
        uses: ./.github/actions/setup

      - name: Install Athena toolchain
        run: |
          curl -L https://install.athenavm.org | bash
          $ATHENA_DIR/bin/athup --path $GITHUB_WORKSPACE
          $ATHENA_DIR/bin/cargo-athena athena --version
          echo "$ATHENA_DIR/bin" >> $GITHUB_PATH

      - name: Install Athena CLI
        run: |
          cd cli
          cargo install --force --locked --path .
          cargo athena install-toolchain

      - name: Run cargo check
        run: |
          RUSTFLAGS="-Copt-level=3 -Cdebug-assertions -Coverflow-checks=y -Cdebuginfo=0 -C target-cpu=native" \
          cargo check --manifest-path examples/Cargo.toml --all-targets --all-features

  cli:
    name: CLI
    runs-on: ubuntu-latest
    env:
      ATHENA_DIR: "${{ github.workspace }}/.athena"
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup CI
        uses: ./.github/actions/setup

      - name: Install Athena toolchain
        run: |
          curl -L https://install.athenavm.org | bash
          $ATHENA_DIR/bin/athup --path $GITHUB_WORKSPACE
          $ATHENA_DIR/bin/cargo-athena athena --version
          echo "$ATHENA_DIR/bin" >> $GITHUB_PATH

      - name: Install Athena CLI
        run: |
          cd cli
          cargo install --force --locked --path .
          cargo athena install-toolchain

      - name: Run cargo athena new
        run: |
          cargo athena new fibonacci

      - name: Build program and run script
        run: |
          cd fibonacci
          cd program
          cargo add athena-vm --path $GITHUB_WORKSPACE/vm/entrypoint
          cargo athena build
          cd ../script
          cargo add athena-interface --path $GITHUB_WORKSPACE/interface
          cargo add athena-sdk --path $GITHUB_WORKSPACE/sdk
          RUST_LOG=info cargo run --release
